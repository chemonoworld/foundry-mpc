import * as wasmModule from "../pkg-web/sssui_wasm";

export { wasmModule };

// Flag to track module initialization status
let isInitialized = false;
// Store the initialized WASM module
let wasmInstance: any = null;
// Store exported functions
const exportedFunctions: Record<string, Function> = {};

type WasmModule = typeof wasmModule;
export type WasmFunctionNames = keyof WasmModule;

/**
 * Function to initialize WASM module and export its functions globally
 *
 * @param wasmModule - WASM module (import * as wasmModule from "my-wasm-module")
 * @param wasmPath - WASM binary file path (default: "/threshold_ecdsa_wasm_bg.wasm")
 * @returns Object containing all exported functions
 */
export async function initWasm(
  wasmModule: any,
  wasmPath: string
): Promise<Record<string, Function>> {
  // const wasmModule: any = originalWasmModule;
  // const wasmPath = "@/../pkg/cait_sith_keplr_wasm_bg.wasm";
  // Return cached functions if already initialized
  if (isInitialized && wasmInstance) {
    return exportedFunctions;
  }

  try {
    // console.log(`Initializing WASM module: ${wasmPath}`);

    // Load WASM binary file
    const response = await fetch(wasmPath);
    if (!response.ok) {
      throw new Error(
        `Cannot load WASM file: ${response.status} ${response.statusText}`
      );
    }

    const wasmBytes = await response.arrayBuffer();

    // Initialize WASM module - initSync is a function generated by wasm-bindgen
    wasmModule.initSync(wasmBytes);

    // Store the initialized module
    wasmInstance = wasmModule;

    // Extract all functions from the module
    Object.keys(wasmModule)
      .filter((key) => typeof wasmModule[key] === "function")
      .forEach((funcName) => {
        // Create a wrapper function that calls the WASM function
        exportedFunctions[funcName] = (...args: any[]) =>
          wasmModule[funcName](...args);
      });

    // Mark initialization as successful
    isInitialized = true;
    // console.log("WASM module initialization complete!");

    return exportedFunctions;
  } catch (error) {
    // console.error("WASM module initialization error:", error);
    throw error;
  }
}

/**
 * Helper function to check if WASM is initialized
 */
export function isWasmInitialized(): boolean {
  return isInitialized;
}
